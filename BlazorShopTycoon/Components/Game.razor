@inject ShopStoreService Shopservice

@if (!String.IsNullOrEmpty(ErrorText))
{
	<span class="bg-danger">@ErrorText</span>
}

<NewShelfitem @bind-newShelfitem="newShelfitem" @ref="newShelfitemComponent"></NewShelfitem>
<button class="btn btn-primary" @onclick="addShelfitem">Add product</button>
@foreach (var item in Shelfitems)
{
	<div class="row">
		<div class="col-3">
			<p>@Shopitems[item.ShopitemID - 1].Name</p>
		</div>
		<div class="col-3">
			<p>@item.Shelfprice</p>
		</div>
		<div class="col-3">
			<p>@item.Shelfcount</p>
		</div>
		<div>
			<button class="btn btn-danger" @onclick="(() => removeShelfitem(item.ShopitemID))">X</button>
		</div>
	</div>
}
<br />
<input disabled @bind="YourMoney" />
<button class="btn btn-danger" @onclick="(()=> NextDay(WeatherBonus.sunshine))">Next day</button>

@code {
	private string ErrorText { get; set; }

	private Shelfitem newShelfitem { get; set; } = new Shelfitem();

	[Parameter]
	public List<Shelfitem> Shelfitems { get; set; }

	[Parameter]
	public EventCallback<List<Shelfitem>> ShelfitemsChanged { get; set; }

	private List<Shopitem> Shopitems { get; set; }

	[Parameter]
	public double YourMoney { get; set; }

	[Parameter]
	public EventCallback<double> YourMoneyChanged { get; set; }

	private NewShelfitem newShelfitemComponent;

	private void addShelfitem()
	{
		if (newShelfitem.ShopitemID>0)
		{
			double newMoneySum = YourMoney - Shopitems.First(x => x.ID == newShelfitem.ShopitemID).Price * newShelfitem.Shelfcount;
			if (newMoneySum >= 0)
			{
				newShelfitemComponent.addProduct();
				YourMoney = newMoneySum;
				GetShelfitems();
				newShelfitem = new Shelfitem();
			}
		}

	}
	private void removeShelfitem(int id)
	{
		Shopservice.DeleteShelfItem(id);
	}

	private void NextDay(WeatherBonus weather)
	{
		Random rng = new Random();

		foreach (var item in Shelfitems)
		{
			var shopitem = Shopitems.FirstOrDefault(x => x.ID == item.ShopitemID);
			double sellmultiplier = 0.70;

			double overpriceratio = ((item.Shelfprice - shopitem.Price) / shopitem.Price);

			sellmultiplier = Math.Min(sellmultiplier - overpriceratio, 0.05);

			if (shopitem.weatherBonus == weather && weather != WeatherBonus.none)
			{
				sellmultiplier = sellmultiplier * 2;
			}
			sellmultiplier = Math.Max(sellmultiplier, 1);
			int maxsold = (int)Math.Floor((double)item.Shelfcount * sellmultiplier);
			int sold = rng.Next(0, maxsold);

			Shopservice.SellShelfitem(item.ShopitemID, item.Shelfprice, sold);
			YourMoney = YourMoney + sold * item.Shelfprice;
		}
	}
	private void GetError()
	{
		ErrorText = Shopservice.ErrorText;
	}
	private void GetShopItems()
	{
		Shopitems = Shopservice.Shopitems;
	}
	private void GetShelfitems()
	{
		Shelfitems = Shopservice.Shelfitems;
	}
	protected override Task OnInitializedAsync()
	{
		GetShopItems();
		GetShelfitems();
		GetError();
		return base.OnInitializedAsync();
	}
}
