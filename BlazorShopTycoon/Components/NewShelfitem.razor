@inject ShopStoreService Shopservice

<h3>What do you want in your store today</h3>

<div class="w-50">
	<select class="custom-select" @bind="newShelfitem.ShopitemID">
		@foreach (var item in Shopitems)
		{
			<option value="@item.ID">@item.Name</option>
		}
	</select>
	<div class="d-flex">
		<label class="text-nowrap">Amount to shelf:</label>
		<input class="form-control" @bind="newShelfitem.Shelfcount" />
	</div>
	<div class="d-flex">
		<label class="text-nowrap">Price:</label>
		<input class="form-control" @bind="newShelfitem.Shelfprice" />
	</div>
	
</div>

@code {

	private List<Shopitem> Shopitems { get; set; }

	[Parameter]
	public Shelfitem newShelfitem { get; set; }


	[Parameter]
	public EventCallback<Shelfitem> newShelfitemChanged { get; set; }

	[Parameter]
	public double yourMoney { get; set; }

	[Parameter]
	public EventCallback<double> yourMoneyChanged { get; set; }

	public void addProduct()
	{
		
		double newMoneySum = yourMoney - Shopitems.First(x => x.ID == newShelfitem.ShopitemID).Price * newShelfitem.Shelfcount;
		if (newMoneySum >= 0)
		{
			Shopservice.NewShelfItem(newShelfitem);
			yourMoney = newMoneySum;
		}
		else
		{
			//error
		}

	}
	protected override Task OnInitializedAsync()
	{
		Shopitems = Shopservice.Shopitems;
		return base.OnInitializedAsync();
	}
}
