@inject ShopStoreService Shopservice

<h3>What do you want in your store today</h3>

@*<div class="w-50">
		<select class="custom-select" @bind="newShelfitem.ShopitemID">
			@foreach (var item in Shopitems)
			{
				<option value="@item.ID">@item.Name</option>
			}
		</select>
		<div class="d-flex">
			<label class="text-nowrap">Amount to shelf:</label>
			<input type="number" class="form-control" @bind="newShelfitem.Shelfcount" />
		</div>
		<div class="d-flex">
			<label class="text-nowrap">Price:</label>
			<input type="number" class="form-control" @bind="newShelfitem.Shelfprice" />
		</div>
	</div>*@
<EditForm Model="@newShelfitem">
	<DataAnnotationsValidator></DataAnnotationsValidator>
	<CustomInputSelect class="form-control" @bind-Value="newShelfitem.ShopitemID" @onchange="UpdateTotalPrice">
		@foreach (var item in Shopitems)
		{
			<option value="@item.ID">@item.Name</option>
		}
	</CustomInputSelect>
	<div class="form-group">
		<label for="Shelfcount">Shelf count:</label>
		<InputNumber @bind-Value="newShelfitem.Shelfcount" class="form-control" @oninput="UpdateTotalPrice"></InputNumber>
		@*<input class="form-control" value="@newShelfitem.Shelfcount" @onchange="UpdateTotalPrice" />*@
	</div>
	<div class="form-group row">
		<div class="col">
			<label for="Shelfprice">Shelf price:</label>
			<InputNumber @bind-Value="newShelfitem.Shelfprice" class="form-control"></InputNumber>
		</div>
		@if (newShelfitem.ShopitemID > 0)
		{
			<div class="col">
				<label>Buying price pr piece:</label>
				<input class="form-control" disabled @bind="Shopitems[newShelfitem.ShopitemID - 1].Price" />
				@*<label class="form-control">@(Shopitems[newShelfitem.ShopitemID - 1].Price*newShelfitem.Shelfcount)</label>*@

				<label>Buying price total:</label>
				<input class="form-control" disabled @bind="totalPrice" @onclick="UpdateTotalPrice" />
				<button class="form-control" @onclick="UpdateTotalPrice">Calculate</button>

			</div>
		}
	</div>
	<ValidationSummary></ValidationSummary>
</EditForm>

@code {

	private List<Shopitem> Shopitems { get; set; }


	private double totalPrice { get; set; }

	private Shelfitem _newShelfitem;
	[Parameter]
	public Shelfitem newShelfitem
	{
		get => _newShelfitem;
		set
		{
			if (_newShelfitem == value)
			{
				return;
			}
			_newShelfitem = value;
			newShelfitemChanged.InvokeAsync(value);
		}
	}

	[Parameter]
	public EventCallback<Shelfitem> newShelfitemChanged { get; set; }

	public void addProduct()
	{
		@if (newShelfitem.Shelfcount>0)
		{
			Shopservice.NewShelfItem(newShelfitem);
		}
	}
	private void UpdateTotalPrice()
	{
		@if (newShelfitem.ShopitemID > 0)
			totalPrice = Shopitems[newShelfitem.ShopitemID - 1].Price * newShelfitem.Shelfcount;
	}
	protected override Task OnInitializedAsync()
	{
		Shopitems = Shopservice.Shopitems;
		newShelfitem = new Shelfitem();
		return base.OnInitializedAsync();
	}
}
